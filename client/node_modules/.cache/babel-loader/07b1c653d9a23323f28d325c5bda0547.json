{"ast":null,"code":"import _regeneratorRuntime from\"/home/saad/Desktop/my-projects/contacts-app/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/saad/Desktop/my-projects/contacts-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/saad/Desktop/my-projects/contacts-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useReducer}from\"react\";import axios from\"axios\";import ContactContext from\"./contactContext\";import contactReducer from\"./contactReducer\";import{CREATE_CONTACT,READ_CONTACTS,SET_CURRENT,CLEAR_CURRENT,UPDATE_CONTACT,DELETE_CONTACT,FILTER_CONTACTS,CLEAR_CONTACTS,CLEAR_FILTER,CONTACT_ERROR}from\"../types\";import{jsx as _jsx}from\"react/jsx-runtime\";var ContactState=function ContactState(props){var initialState={contacts:[],// temporary object to store the edits\ncurrent:null,// search term value\nfiltered:null,// error message\nerror:null,// loading\nloading:true};// dispatching functions\nvar _useReducer=useReducer(contactReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];// create contact\nvar createContact=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(contact){var config,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// define header details\nconfig={headers:{\"Content-Type\":\"application/json\"}};_context.prev=1;_context.next=4;return axios.post(\"/api/contacts\",contact,config);case 4:response=_context.sent;// add the contact\ndispatch({type:CREATE_CONTACT,payload:response.data});_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);// if registration failed\ndispatch({type:CONTACT_ERROR,payload:_context.t0.response.data.message});case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function createContact(_x){return _ref.apply(this,arguments);};}();// read contacts\nvar readContacts=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"/api/contacts\");case 3:response=_context2.sent;// get the contacts\ndispatch({type:READ_CONTACTS,payload:response.data});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);// if registration failed\ndispatch({type:CONTACT_ERROR,payload:_context2.t0.response.data.message});case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function readContacts(){return _ref2.apply(this,arguments);};}();// update contact - 1 - defines the changes to the current contact\nvar setCurrentContact=function setCurrentContact(contact){return dispatch({type:SET_CURRENT,payload:contact});};// update contact - 2 - clear the edit field after changes are made\nvar clearCurrentContact=function clearCurrentContact(){return dispatch({type:CLEAR_CURRENT});};// update contact - 3 - actually update the contact\nvar updateContact=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contact){var config,response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// define header details\nconfig={headers:{\"Content-Type\":\"application/json\"}};_context3.prev=1;_context3.next=4;return axios.put(\"/api/contacts/\".concat(contact._id),contact,config);case 4:response=_context3.sent;// update the contact\ndispatch({type:UPDATE_CONTACT,payload:response.data});_context3.next=11;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](1);// if there is error\ndispatch({type:CONTACT_ERROR,payload:_context3.t0.response.data.message});case 11:case\"end\":return _context3.stop();}}},_callee3,null,[[1,8]]);}));return function updateContact(_x2){return _ref3.apply(this,arguments);};}();// delete contact - cruD\nvar deleteContact=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return axios.delete(\"/api/contacts/\".concat(id));case 3:// delete the contact\ndispatch({type:DELETE_CONTACT,payload:id});_context4.next=9;break;case 6:_context4.prev=6;_context4.t0=_context4[\"catch\"](0);// in case of error\ndispatch({type:CONTACT_ERROR,payload:_context4.t0.response.data.message});case 9:case\"end\":return _context4.stop();}}},_callee4,null,[[0,6]]);}));return function deleteContact(_x3){return _ref4.apply(this,arguments);};}();// clear contacts\nvar clearContacts=function clearContacts(){return dispatch({type:CLEAR_CONTACTS});};// filter contacts\nvar searchContact=function searchContact(text){return dispatch({type:FILTER_CONTACTS,payload:text});};// clear filters\nvar clearContactSearch=function clearContactSearch(){return dispatch({type:CLEAR_FILTER});};return/*#__PURE__*/_jsx(ContactContext.Provider,{value:{contacts:state.contacts,current:state.current,filtered:state.filtered,error:state.error,loading:state.loading,createContact:createContact,readContacts:readContacts,setCurrentContact:setCurrentContact,clearCurrentContact:clearCurrentContact,updateContact:updateContact,deleteContact:deleteContact,clearContacts:clearContacts,searchContact:searchContact,clearContactSearch:clearContactSearch},children:props.children});};export default ContactState;","map":{"version":3,"sources":["/home/saad/Desktop/my-projects/contacts-app/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","CREATE_CONTACT","READ_CONTACTS","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","loading","state","dispatch","createContact","contact","config","headers","post","response","type","payload","data","message","readContacts","get","setCurrentContact","clearCurrentContact","updateContact","put","_id","deleteContact","id","delete","clearContacts","searchContact","text","clearContactSearch","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  CREATE_CONTACT,\n  READ_CONTACTS,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    // temporary object to store the edits\n    current: null,\n    // search term value\n    filtered: null,\n    // error message\n    error: null,\n    // loading\n    loading: true,\n  };\n\n  // dispatching functions\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // create contact\n  const createContact = async contact => {\n    // define header details\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n    try {\n      // connect to api post\n      const response = await axios.post(\"/api/contacts\", contact, config);\n      // add the contact\n      dispatch({ type: CREATE_CONTACT, payload: response.data });\n    } catch (err) {\n      // if registration failed\n      dispatch({ type: CONTACT_ERROR, payload: err.response.data.message });\n    }\n  };\n\n  // read contacts\n  const readContacts = async () => {\n    // try to fetch contact\n    try {\n      // connect to api get\n      const response = await axios.get(\"/api/contacts\");\n      // get the contacts\n      dispatch({ type: READ_CONTACTS, payload: response.data });\n    } catch (err) {\n      // if registration failed\n      dispatch({ type: CONTACT_ERROR, payload: err.response.data.message });\n    }\n  };\n\n  // update contact - 1 - defines the changes to the current contact\n  const setCurrentContact = contact =>\n    dispatch({ type: SET_CURRENT, payload: contact });\n  // update contact - 2 - clear the edit field after changes are made\n  const clearCurrentContact = () => dispatch({ type: CLEAR_CURRENT });\n\n  // update contact - 3 - actually update the contact\n  const updateContact = async contact => {\n    // define header details\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n    try {\n      // connect to api post\n      const response = await axios.put(\n        `/api/contacts/${contact._id}`,\n        contact,\n        config\n      );\n      // update the contact\n      dispatch({ type: UPDATE_CONTACT, payload: response.data });\n    } catch (err) {\n      // if there is error\n      dispatch({ type: CONTACT_ERROR, payload: err.response.data.message });\n    }\n  };\n\n  // delete contact - cruD\n  const deleteContact = async id => {\n    try {\n      // connect to api delete\n      await axios.delete(`/api/contacts/${id}`);\n      // delete the contact\n      dispatch({ type: DELETE_CONTACT, payload: id });\n    } catch (err) {\n      // in case of error\n      dispatch({ type: CONTACT_ERROR, payload: err.response.data.message });\n    }\n  };\n\n  // clear contacts\n  const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n  // filter contacts\n  const searchContact = text =>\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  // clear filters\n  const clearContactSearch = () => dispatch({ type: CLEAR_FILTER });\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        loading: state.loading,\n        createContact,\n        readContacts,\n        setCurrentContact,\n        clearCurrentContact,\n        updateContact,\n        deleteContact,\n        clearContacts,\n        searchContact,\n        clearContactSearch,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}