{"ast":null,"code":"// login users route\nconst express = require(\"express\"); // import express\n\n\nconst router = express.Router(); // shortcut for router\n\nconst bcrypt = require(\"bcryptjs\"); // import bcrypt\n\n\nconst jsonwebtoken = require(\"jsonwebtoken\");\n\nconst config = require(\"config\"); // import config\n\n\nconst auth = require(\"../middleware/auth\"); // import from middleware\n\n\nconst {\n  body,\n  validationResult,\n  check\n} = require(\"express-validator\"); // import express validator\n\n\nconst User = require(\"../models/User\"); // import User model\n// @route   GET api/auth\n// @desc    Get logged in users\n// @access  Private (done by auth)\n\n\nrouter.get(\"/\", auth, async (request, response) => {\n  try {\n    const user = await User.findById(request.user.id).select(\"-password\");\n    response.json(user);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n}); // @route   POST api/auth\n// @desc    Auth user and get token / enter login credentials\n// @access  Public\n\nrouter.post(\"/\", [check(\"email\", \"Please enter a valid email\").isEmail(), check(\"password\", \"Please enter the password\").exists()], async (request, response) => {\n  const errors = validationResult(request);\n\n  if (!errors.isEmpty()) {\n    return response.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    email,\n    password\n  } = request.body;\n\n  try {\n    // check if email exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return response.status(400).json({\n        message: \"This email address is not registered\"\n      });\n    } // check if password is correct\n\n\n    const doesPasswordMatch = await bcrypt.compare(password, user.password);\n\n    if (!doesPasswordMatch) {\n      return response.status(400).json({\n        message: \"The password you entered is wrong\"\n      });\n    } // get json web token\n\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jsonwebtoken.sign(payload, config.get(\"jsonWebTokenSecret\"), {\n      expiresIn: 3600\n    }, (err, token) => {\n      if (err) throw err;\n      response.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\nmodule.exports = router; // export functions to express.Router","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/routes/auth.js"],"names":["express","require","router","Router","bcrypt","jsonwebtoken","config","auth","body","validationResult","check","User","get","request","response","user","findById","id","select","json","err","console","error","message","status","send","post","isEmail","exists","errors","isEmpty","array","email","password","findOne","doesPasswordMatch","compare","payload","sign","expiresIn","token","module","exports"],"mappings":"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","sourcesContent":["// login users route\nconst express = require(\"express\"); // import express\nconst router = express.Router(); // shortcut for router\nconst bcrypt = require(\"bcryptjs\"); // import bcrypt\nconst jsonwebtoken = require(\"jsonwebtoken\");\nconst config = require(\"config\"); // import config\nconst auth = require(\"../middleware/auth\"); // import from middleware\nconst { body, validationResult, check } = require(\"express-validator\"); // import express validator\n\nconst User = require(\"../models/User\"); // import User model\n\n// @route   GET api/auth\n// @desc    Get logged in users\n// @access  Private (done by auth)\nrouter.get(\"/\", auth, async (request, response) => {\n  try {\n    const user = await User.findById(request.user.id).select(\"-password\");\n    response.json(user);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\n\n// @route   POST api/auth\n// @desc    Auth user and get token / enter login credentials\n// @access  Public\nrouter.post(\n  \"/\",\n  [\n    check(\"email\", \"Please enter a valid email\").isEmail(),\n    check(\"password\", \"Please enter the password\").exists(),\n  ],\n  async (request, response) => {\n    const errors = validationResult(request);\n    if (!errors.isEmpty()) {\n      return response.status(400).json({ errors: errors.array() });\n    }\n    const { email, password } = request.body;\n    try {\n      // check if email exists\n      let user = await User.findOne({ email });\n      if (!user) {\n        return response\n          .status(400)\n          .json({ message: \"This email address is not registered\" });\n      }\n      // check if password is correct\n      const doesPasswordMatch = await bcrypt.compare(password, user.password);\n      if (!doesPasswordMatch) {\n        return response\n          .status(400)\n          .json({ message: \"The password you entered is wrong\" });\n      }\n      // get json web token\n      const payload = { user: { id: user.id } };\n      jsonwebtoken.sign(\n        payload,\n        config.get(\"jsonWebTokenSecret\"),\n        { expiresIn: 3600 },\n        (err, token) => {\n          if (err) throw err;\n          response.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      response.status(500).send(`Server error`);\n    }\n  }\n);\n\nmodule.exports = router; // export functions to express.Router\n"]},"metadata":{},"sourceType":"script"}