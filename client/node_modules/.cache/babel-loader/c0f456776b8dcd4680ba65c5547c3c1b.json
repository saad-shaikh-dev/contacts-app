{"ast":null,"code":"var _jsxFileName = \"/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport { CREATE_CONTACT, READ_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [],\n    // temporary object to store the edits\n    current: null,\n    // search term value\n    filtered: null,\n    // error message\n    error: null\n  }; // dispatching functions\n\n  const [state, dispatch] = useReducer(contactReducer, initialState); // create contact\n\n  const createContact = async contact => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // try to create contact\n\n    try {\n      const response = await axios.post(\"/api/contacts\", contact, config); // add the contact\n\n      dispatch({\n        type: CREATE_CONTACT,\n        payload: response.data\n      });\n    } catch (err) {\n      // if registration failed\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.data.message\n      });\n    }\n  }; // read contacts\n  // update contact - 1 - defines the changes to the current contact\n\n\n  const setCurrentContact = contact => dispatch({\n    type: SET_CURRENT,\n    payload: contact\n  }); // update contact - 2 - clear the edit field after changes are made\n\n\n  const clearCurrentContact = () => dispatch({\n    type: CLEAR_CURRENT\n  }); // update contact - 3 - actually update the contact\n\n\n  const updateContact = contact => dispatch({\n    type: UPDATE_CONTACT,\n    payload: contact\n  }); // delete contact - cruD\n\n\n  const deleteContact = id => dispatch({\n    type: DELETE_CONTACT,\n    payload: id\n  }); // filter contacts\n\n\n  const searchContact = text => dispatch({\n    type: FILTER_CONTACTS,\n    payload: text\n  }); // clear filters\n\n\n  const clearContactSearch = () => dispatch({\n    type: CLEAR_FILTER\n  });\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      createContact,\n      setCurrentContact,\n      clearCurrentContact,\n      updateContact,\n      deleteContact,\n      searchContact,\n      clearContactSearch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","CREATE_CONTACT","READ_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","createContact","contact","config","headers","response","post","type","payload","data","err","message","setCurrentContact","clearCurrentContact","updateContact","deleteContact","id","searchContact","text","clearContactSearch","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  CREATE_CONTACT,\n  READ_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    // temporary object to store the edits\n    current: null,\n    // search term value\n    filtered: null,\n    // error message\n    error: null,\n  };\n\n  // dispatching functions\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // create contact\n  const createContact = async contact => {\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\n    // try to create contact\n    try {\n      const response = await axios.post(\"/api/contacts\", contact, config);\n      // add the contact\n      dispatch({ type: CREATE_CONTACT, payload: response.data });\n    } catch (err) {\n      // if registration failed\n      dispatch({ type: CONTACT_ERROR, payload: err.response.data.message });\n    }\n  };\n\n  // read contacts\n  \n\n  // update contact - 1 - defines the changes to the current contact\n  const setCurrentContact = contact =>\n    dispatch({ type: SET_CURRENT, payload: contact });\n  // update contact - 2 - clear the edit field after changes are made\n  const clearCurrentContact = () => dispatch({ type: CLEAR_CURRENT });\n  // update contact - 3 - actually update the contact\n  const updateContact = contact =>\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n\n  // delete contact - cruD\n  const deleteContact = id => dispatch({ type: DELETE_CONTACT, payload: id });\n\n  // filter contacts\n  const searchContact = text =>\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  // clear filters\n  const clearContactSearch = () => dispatch({ type: CLEAR_FILTER });\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        createContact,\n        setCurrentContact,\n        clearCurrentContact,\n        updateContact,\n        deleteContact,\n        searchContact,\n        clearContactSearch,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}