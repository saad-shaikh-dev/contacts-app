{"ast":null,"code":"var _jsxFileName = \"/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport { CREATE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [{\n      id: \"1\",\n      name: \"Yasir\",\n      email: \"yasir@gmail.com\",\n      phone: \"55555555\",\n      type: \"personal\"\n    }, {\n      id: \"2\",\n      name: \"Tahir\",\n      email: \"tahir@hotmail.com\",\n      phone: \"77777777\",\n      type: \"professional\"\n    }, {\n      id: \"3\",\n      name: \"Zubair\",\n      email: \"zubair@hotmail.com\",\n      phone: \"66666666\",\n      type: \"professional\"\n    }],\n    // temporary object to store the edits\n    current: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // CREATE_CONTACT - Crud\n\n  const createContact = contact => {\n    contact.id = uuid.v4;\n    dispatch({\n      type: CREATE_CONTACT,\n      payload: contact\n    });\n  }; // SET_CURRENT - crUd-1 - defines the changes to the current contact\n\n\n  const setCurrentContact = contact => dispatch({\n    type: SET_CURRENT,\n    payload: contact\n  }); // CLEAR_CURRENT - crUd-2 - clear the edit field after changes are made\n\n\n  const clearCurrentContact = () => dispatch({\n    type: CLEAR_CURRENT\n  }); // UPDATE_CONTACT - crUd\n  // DELETE_CONTACT - cruD\n\n\n  const deleteContact = id => dispatch({\n    type: DELETE_CONTACT,\n    payload: id\n  }); // FILTER_CONTACTS\n  // CLEAR_FILTER\n\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      createContact,\n      setCurrentContact,\n      clearCurrentContact,\n      deleteContact\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","v4","uuid","ContactContext","contactReducer","CREATE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","ContactState","props","initialState","contacts","id","name","email","phone","type","current","state","dispatch","createContact","contact","payload","setCurrentContact","clearCurrentContact","deleteContact","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,QAQO,UARP;;;AAUA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,KAAK,EAAE,iBAHT;AAIEC,MAAAA,KAAK,EAAE,UAJT;AAKEC,MAAAA,IAAI,EAAE;AALR,KADQ,EAQR;AACEJ,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,KAAK,EAAE,mBAHT;AAIEC,MAAAA,KAAK,EAAE,UAJT;AAKEC,MAAAA,IAAI,EAAE;AALR,KARQ,EAeR;AACEJ,MAAAA,EAAE,EAAE,GADN;AAEEC,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,KAAK,EAAE,oBAHT;AAIEC,MAAAA,KAAK,EAAE,UAJT;AAKEC,MAAAA,IAAI,EAAE;AALR,KAfQ,CADS;AAwBnB;AACAC,IAAAA,OAAO,EAAE;AAzBU,GAArB;AA2BA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,UAAU,CAACI,cAAD,EAAiBU,YAAjB,CAApC,CA5B4B,CA6B5B;;AACA,QAAMU,aAAa,GAAGC,OAAO,IAAI;AAC/BA,IAAAA,OAAO,CAACT,EAAR,GAAad,IAAI,CAACD,EAAlB;AACAsB,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEf,cAAR;AAAwBqB,MAAAA,OAAO,EAAED;AAAjC,KAAD,CAAR;AACD,GAHD,CA9B4B,CAkC5B;;;AACA,QAAME,iBAAiB,GAAGF,OAAO,IAC/BF,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEd,WAAR;AAAqBoB,IAAAA,OAAO,EAAED;AAA9B,GAAD,CADV,CAnC4B,CAqC5B;;;AACA,QAAMG,mBAAmB,GAAG,MAAML,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEb;AAAR,GAAD,CAA1C,CAtC4B,CAuC5B;AACA;;;AACA,QAAMsB,aAAa,GAAGb,EAAE,IAAIO,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEX,cAAR;AAAwBiB,IAAAA,OAAO,EAAEV;AAAjC,GAAD,CAApC,CAzC4B,CA0C5B;AACA;;;AACA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,QAAQ,EAAEO,KAAK,CAACP,QADX;AAELM,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAFV;AAGLG,MAAAA,aAHK;AAILG,MAAAA,iBAJK;AAKLC,MAAAA,mBALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGhB,KAAK,CAACiB;AAVT;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA1DD;;GAAMlB,Y;;KAAAA,Y;AA4DN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  CREATE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [\n      {\n        id: \"1\",\n        name: \"Yasir\",\n        email: \"yasir@gmail.com\",\n        phone: \"55555555\",\n        type: \"personal\",\n      },\n      {\n        id: \"2\",\n        name: \"Tahir\",\n        email: \"tahir@hotmail.com\",\n        phone: \"77777777\",\n        type: \"professional\",\n      },\n      {\n        id: \"3\",\n        name: \"Zubair\",\n        email: \"zubair@hotmail.com\",\n        phone: \"66666666\",\n        type: \"professional\",\n      },\n    ],\n    // temporary object to store the edits\n    current: null,\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n  // CREATE_CONTACT - Crud\n  const createContact = contact => {\n    contact.id = uuid.v4;\n    dispatch({ type: CREATE_CONTACT, payload: contact });\n  };\n  // SET_CURRENT - crUd-1 - defines the changes to the current contact\n  const setCurrentContact = contact =>\n    dispatch({ type: SET_CURRENT, payload: contact });\n  // CLEAR_CURRENT - crUd-2 - clear the edit field after changes are made\n  const clearCurrentContact = () => dispatch({ type: CLEAR_CURRENT });\n  // UPDATE_CONTACT - crUd\n  // DELETE_CONTACT - cruD\n  const deleteContact = id => dispatch({ type: DELETE_CONTACT, payload: id });\n  // FILTER_CONTACTS\n  // CLEAR_FILTER\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        createContact,\n        setCurrentContact,\n        clearCurrentContact,\n        deleteContact,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}