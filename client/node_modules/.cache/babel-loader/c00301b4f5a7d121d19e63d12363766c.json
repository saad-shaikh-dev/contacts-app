{"ast":null,"code":"// register a user route\nconst express = require(\"express\"); // import express\n\n\nconst router = express.Router(); // shortcut for router\n\nconst bcrypt = require(\"bcryptjs\"); // import bcrypt\n\n\nconst jsonwebtoken = require(\"jsonwebtoken\");\n\nconst config = require(\"config\");\n\nconst {\n  body,\n  validationResult,\n  check\n} = require(\"express-validator\"); // import express validator\n\n\nconst User = require(\"../models/User\"); // import User model\n// @route   POST api/users\n// @desc    Register a user\n// @access  Public\n\n\nrouter.post(\"/\", [check(\"name\", \"Please add a name\").not().isEmpty(), check(\"email\", \"Please include a valid email\").isEmail(), check(\"password\", \"Please create a password with 8 or more characters\").isLength({\n  min: 8\n})], async (request, response) => {\n  // check for errors\n  const errors = validationResult(request);\n\n  if (!errors.isEmpty()) {\n    return response.status(400).json({\n      errors: errors.array()\n    });\n  } // if there are no errors\n\n\n  const {\n    name,\n    email,\n    password\n  } = request.body;\n\n  try {\n    // check if user email exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return response.status(400).json({\n        message: \"This user already exists\"\n      });\n    } // create new user\n\n\n    user = new User({\n      name,\n      email,\n      password\n    });\n    /* encrypt the password */\n\n    const salt = await bcrypt.genSalt();\n    user.password = await bcrypt.hash(password, salt); // save new user\n\n    await user.save(); // create json web token\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jsonwebtoken.sign(payload, config.get(\"jsonWebTokenSecret\"), {\n      expiresIn: 3600\n    }, (err, token) => {\n      if (err) throw err;\n      response.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\nmodule.exports = router; // export functions to express.Router","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/routes/users.js"],"names":["express","require","router","Router","bcrypt","jsonwebtoken","config","body","validationResult","check","User","post","not","isEmpty","isEmail","isLength","min","request","response","errors","status","json","array","name","email","password","user","findOne","message","salt","genSalt","hash","save","payload","id","sign","get","expiresIn","err","token","console","error","send","module","exports"],"mappings":"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","sourcesContent":["// register a user route\nconst express = require(\"express\"); // import express\nconst router = express.Router(); // shortcut for router\nconst bcrypt = require(\"bcryptjs\"); // import bcrypt\nconst jsonwebtoken = require(\"jsonwebtoken\");\nconst config = require(\"config\");\nconst { body, validationResult, check } = require(\"express-validator\"); // import express validator\n\nconst User = require(\"../models/User\"); // import User model\n\n// @route   POST api/users\n// @desc    Register a user\n// @access  Public\nrouter.post(\n  \"/\",\n  [\n    check(\"name\", \"Please add a name\").not().isEmpty(),\n    check(\"email\", \"Please include a valid email\").isEmail(),\n    check(\n      \"password\",\n      \"Please create a password with 8 or more characters\"\n    ).isLength({ min: 8 }),\n  ],\n  async (request, response) => {\n    // check for errors\n    const errors = validationResult(request);\n    if (!errors.isEmpty()) {\n      return response.status(400).json({ errors: errors.array() });\n    }\n    // if there are no errors\n    const { name, email, password } = request.body;\n    try {\n      // check if user email exists\n      let user = await User.findOne({ email });\n      if (user) {\n        return response\n          .status(400)\n          .json({ message: \"This user already exists\" });\n      }\n      // create new user\n      user = new User({ name, email, password });\n      /* encrypt the password */\n      const salt = await bcrypt.genSalt();\n      user.password = await bcrypt.hash(password, salt);\n      // save new user\n      await user.save();\n      // create json web token\n      const payload = { user: { id: user.id } };\n      jsonwebtoken.sign(\n        payload,\n        config.get(\"jsonWebTokenSecret\"),\n        { expiresIn: 3600 },\n        (err, token) => {\n          if (err) throw err;\n          response.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      response.status(500).send(`Server error`);\n    }\n  }\n);\n\nmodule.exports = router; // export functions to express.Router\n"]},"metadata":{},"sourceType":"script"}