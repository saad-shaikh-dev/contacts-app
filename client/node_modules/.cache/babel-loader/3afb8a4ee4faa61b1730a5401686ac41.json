{"ast":null,"code":"// crud functionality route\nconst express = require(\"express\"); // import express\n\n\nconst router = express.Router(); // import express(Router)\n\nconst auth = require(\"../middleware/auth\"); // import from middleware\n\n\nconst {\n  validationResult,\n  check\n} = require(\"express-validator\"); // import express validator\n\n\nconst User = require(\"../models/User\"); // import User model\n\n\nconst Contact = require(\"../models/Contact\"); // import Contact model\n// cRud | GET api/contacts | Private\n\n\nrouter.get(\"/\", auth, async (request, response) => {\n  try {\n    // find all contacts\n    const contacts = await Contact.find({\n      user: request.user.id\n    }).sort({\n      date: -1\n    }); // get the contacts\n\n    response.json(contacts);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n}); // Crud | POST api/contacts | Private\n\nrouter.post(\"/\", [auth, [check(\"name\", \"Please add a name for your new contact\").not().isEmpty()]], async (request, response) => {\n  // check for errors\n  const errors = validationResult(request);\n\n  if (!errors.isEmpty()) {\n    return response.status(400).json({\n      errors: errors.array()\n    });\n  } // if there are no errors\n\n\n  const {\n    name,\n    email,\n    phone,\n    type\n  } = request.body; // add a new contact\n\n  try {\n    const newContact = new Contact({\n      name,\n      email,\n      phone,\n      type,\n      user: request.user.id\n    }); // save new contact after it is created\n\n    const contact = await newContact.save();\n    response.json(contact);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n}); // crUd | PUT api/contacts/:id | Private\n\nrouter.put(\"/:id\", auth, async (request, response) => {\n  const {\n    name,\n    email,\n    phone,\n    type\n  } = request.body; // build contact object for updated contact info\n\n  const contactFields = {}; // make updated contact params = acutual contact params\n\n  if (name) contactFields.name = name;\n  if (email) contactFields.email = email;\n  if (phone) contactFields.phone = phone;\n  if (type) contactFields.type = type;\n\n  try {\n    // check if contact exists\n    let contact = await Contact.findById(request.params.id);\n    if (!contact) return response.status(404).json({\n      message: `This contact does not exist`\n    }); // check if user owns contact\n\n    if (contact.user.toString() !== request.user.id) {\n      return response.status(401).json({\n        message: `This use is not authorised`\n      });\n    } // update the contact\n\n\n    contact = await Contact.findByIdAndUpdate(request.params.id, {\n      $set: contactFields\n    }, {\n      new: true\n    } // if it doen't exist create a new one\n    ); // publish updated contact\n\n    response.json(contact);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n}); // cruD | DELETE api/contacts/:id | Private\n\nrouter.delete(\"/:id\", auth, async (request, response) => {\n  try {\n    // check if contact exists\n    let contact = await Contact.findById(request.params.id);\n    if (!contact) return response.status(404).json({\n      message: `This contact does not exist`\n    }); // check if user owns contact\n\n    if (contact.user.toString() !== request.user.id) {\n      return response.status(401).json({\n        message: `This use is not authorised`\n      });\n    } // delete the contact\n\n\n    await Contact.findByIdAndRemove(request.params.id); // publish updated contact\n\n    response.json({\n      message: `Contact was deleted`\n    });\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\nmodule.exports = router; // export functions to express.Router","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/routes/contacts.js"],"names":["express","require","router","Router","auth","validationResult","check","User","Contact","get","request","response","contacts","find","user","id","sort","date","json","err","console","error","message","status","send","post","not","isEmpty","errors","array","name","email","phone","type","body","newContact","contact","save","put","contactFields","findById","params","toString","findByIdAndUpdate","$set","new","delete","findByIdAndRemove","module","exports"],"mappings":"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","sourcesContent":["// crud functionality route\nconst express = require(\"express\"); // import express\nconst router = express.Router(); // import express(Router)\nconst auth = require(\"../middleware/auth\"); // import from middleware\nconst { validationResult, check } = require(\"express-validator\"); // import express validator\n\nconst User = require(\"../models/User\"); // import User model\nconst Contact = require(\"../models/Contact\"); // import Contact model\n\n// cRud | GET api/contacts | Private\nrouter.get(\"/\", auth, async (request, response) => {\n  try {\n    // find all contacts\n    const contacts = await Contact.find({ user: request.user.id }).sort({\n      date: -1,\n    });\n    // get the contacts\n    response.json(contacts);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\n\n// Crud | POST api/contacts | Private\nrouter.post(\n  \"/\",\n  [\n    auth,\n    [check(\"name\", \"Please add a name for your new contact\").not().isEmpty()],\n  ],\n  async (request, response) => {\n    // check for errors\n    const errors = validationResult(request);\n    if (!errors.isEmpty()) {\n      return response.status(400).json({ errors: errors.array() });\n    }\n    // if there are no errors\n    const { name, email, phone, type } = request.body;\n    // add a new contact\n    try {\n      const newContact = new Contact({\n        name,\n        email,\n        phone,\n        type,\n        user: request.user.id,\n      });\n      // save new contact after it is created\n      const contact = await newContact.save();\n      response.json(contact);\n    } catch (err) {\n      console.error(err.message);\n      response.status(500).send(`Server error`);\n    }\n  }\n);\n\n// crUd | PUT api/contacts/:id | Private\nrouter.put(\"/:id\", auth, async (request, response) => {\n  const { name, email, phone, type } = request.body;\n  // build contact object for updated contact info\n  const contactFields = {};\n  // make updated contact params = acutual contact params\n  if (name) contactFields.name = name;\n  if (email) contactFields.email = email;\n  if (phone) contactFields.phone = phone;\n  if (type) contactFields.type = type;\n\n  try {\n    // check if contact exists\n    let contact = await Contact.findById(request.params.id);\n    if (!contact)\n      return response\n        .status(404)\n        .json({ message: `This contact does not exist` });\n    // check if user owns contact\n    if (contact.user.toString() !== request.user.id) {\n      return response\n        .status(401)\n        .json({ message: `This use is not authorised` });\n    }\n    // update the contact\n    contact = await Contact.findByIdAndUpdate(\n      request.params.id,\n      { $set: contactFields },\n      { new: true } // if it doen't exist create a new one\n    );\n    // publish updated contact\n    response.json(contact);\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\n\n// cruD | DELETE api/contacts/:id | Private\nrouter.delete(\"/:id\", auth, async (request, response) => {\n  try {\n    // check if contact exists\n    let contact = await Contact.findById(request.params.id);\n    if (!contact)\n      return response\n        .status(404)\n        .json({ message: `This contact does not exist` });\n    // check if user owns contact\n    if (contact.user.toString() !== request.user.id) {\n      return response\n        .status(401)\n        .json({ message: `This use is not authorised` });\n    }\n    // delete the contact\n    await Contact.findByIdAndRemove(request.params.id);\n    // publish updated contact\n    response.json({ message: `Contact was deleted` });\n  } catch (err) {\n    console.error(err.message);\n    response.status(500).send(`Server error`);\n  }\n});\n\nmodule.exports = router; // export functions to express.Router\n"]},"metadata":{},"sourceType":"script"}