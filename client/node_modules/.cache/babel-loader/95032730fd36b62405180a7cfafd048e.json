{"ast":null,"code":"var _jsxFileName = \"/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuid } from \"uuid\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport { CREATE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [],\n    // temporary object to store the edits\n    current: null,\n    // search term value\n    filtered: null\n  }; // dispatching functions\n\n  const [state, dispatch] = useReducer(contactReducer, initialState); // create contact\n\n  const createContact = async contact => {\n    dispatch({\n      type: CREATE_CONTACT,\n      payload: contact\n    });\n  }; // update contact - 1 - defines the changes to the current contact\n\n\n  const setCurrentContact = contact => dispatch({\n    type: SET_CURRENT,\n    payload: contact\n  }); // update contact - 2 - clear the edit field after changes are made\n\n\n  const clearCurrentContact = () => dispatch({\n    type: CLEAR_CURRENT\n  }); // update contact - 3 - actually update the contact\n\n\n  const updateContact = contact => dispatch({\n    type: UPDATE_CONTACT,\n    payload: contact\n  }); // delete contact - cruD\n\n\n  const deleteContact = id => dispatch({\n    type: DELETE_CONTACT,\n    payload: id\n  }); // filter contacts\n\n\n  const searchContact = text => dispatch({\n    type: FILTER_CONTACTS,\n    payload: text\n  }); // clear filters\n\n\n  const clearContactSearch = () => dispatch({\n    type: CLEAR_FILTER\n  });\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      createContact,\n      setCurrentContact,\n      clearCurrentContact,\n      updateContact,\n      deleteContact,\n      searchContact,\n      clearContactSearch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","v4","uuid","ContactContext","contactReducer","CREATE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","ContactState","props","initialState","contacts","current","filtered","state","dispatch","createContact","contact","type","payload","setCurrentContact","clearCurrentContact","updateContact","deleteContact","id","searchContact","text","clearContactSearch","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,QAQO,UARP;;;AAUA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,QAAQ,EAAE,EADS;AAEnB;AACAC,IAAAA,OAAO,EAAE,IAHU;AAInB;AACAC,IAAAA,QAAQ,EAAE;AALS,GAArB,CAD4B,CAS5B;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,UAAU,CAACK,cAAD,EAAiBU,YAAjB,CAApC,CAV4B,CAY5B;;AACA,QAAMM,aAAa,GAAG,MAAMC,OAAN,IAAiB;AACrCF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,MAAAA,OAAO,EAAEF;AAAjC,KAAD,CAAR;AACD,GAFD,CAb4B,CAiB5B;;;AACA,QAAMG,iBAAiB,GAAGH,OAAO,IAC/BF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEhB,WAAR;AAAqBiB,IAAAA,OAAO,EAAEF;AAA9B,GAAD,CADV,CAlB4B,CAoB5B;;;AACA,QAAMI,mBAAmB,GAAG,MAAMN,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAA1C,CArB4B,CAsB5B;;;AACA,QAAMmB,aAAa,GAAGL,OAAO,IAC3BF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEd,cAAR;AAAwBe,IAAAA,OAAO,EAAEF;AAAjC,GAAD,CADV,CAvB4B,CA0B5B;;;AACA,QAAMM,aAAa,GAAGC,EAAE,IAAIT,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEb,cAAR;AAAwBc,IAAAA,OAAO,EAAEK;AAAjC,GAAD,CAApC,CA3B4B,CA6B5B;;;AACA,QAAMC,aAAa,GAAGC,IAAI,IACxBX,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEZ,eAAR;AAAyBa,IAAAA,OAAO,EAAEO;AAAlC,GAAD,CADV,CA9B4B,CAgC5B;;;AACA,QAAMC,kBAAkB,GAAG,MAAMZ,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAzC;;AAEA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,QAAQ,EAAEG,KAAK,CAACH,QADX;AAELC,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAFV;AAGLC,MAAAA,QAAQ,EAAEC,KAAK,CAACD,QAHX;AAILG,MAAAA,aAJK;AAKLI,MAAAA,iBALK;AAMLC,MAAAA,mBANK;AAOLC,MAAAA,aAPK;AAQLC,MAAAA,aARK;AASLE,MAAAA,aATK;AAULE,MAAAA;AAVK,KADT;AAAA,cAcGlB,KAAK,CAACmB;AAdT;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CArDD;;GAAMpB,Y;;KAAAA,Y;AAuDN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport { v4 as uuid } from \"uuid\";\nimport ContactContext from \"./contactContext\";\nimport contactReducer from \"./contactReducer\";\nimport {\n  CREATE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n} from \"../types\";\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    // temporary object to store the edits\n    current: null,\n    // search term value\n    filtered: null,\n  };\n\n  // dispatching functions\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // create contact\n  const createContact = async contact => {\n    dispatch({ type: CREATE_CONTACT, payload: contact });\n  };\n\n  // update contact - 1 - defines the changes to the current contact\n  const setCurrentContact = contact =>\n    dispatch({ type: SET_CURRENT, payload: contact });\n  // update contact - 2 - clear the edit field after changes are made\n  const clearCurrentContact = () => dispatch({ type: CLEAR_CURRENT });\n  // update contact - 3 - actually update the contact\n  const updateContact = contact =>\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\n\n  // delete contact - cruD\n  const deleteContact = id => dispatch({ type: DELETE_CONTACT, payload: id });\n\n  // filter contacts\n  const searchContact = text =>\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  // clear filters\n  const clearContactSearch = () => dispatch({ type: CLEAR_FILTER });\n\n  return (\n    <ContactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        createContact,\n        setCurrentContact,\n        clearCurrentContact,\n        updateContact,\n        deleteContact,\n        searchContact,\n        clearContactSearch,\n      }}\n    >\n      {props.children}\n    </ContactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}