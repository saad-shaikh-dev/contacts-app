{"ast":null,"code":"import { CREATE_CONTACT, READ_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, DELETE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from \"../types\"; // reducer\n\nconst contactReducer = (state, action) => {\n  switch (action.type) {\n    // create contact\n    case CREATE_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n    // read contact\n    // update contact\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        // if the id of current matches existing contact, update value, else old value\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      };\n    // delete contact\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n    // search contacts\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, `gi`);\n          return contact.name.match(regex) || contact.phone.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n    // get error message\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contactReducer;","map":{"version":3,"sources":["/home/saad/Desktop/udemy/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["CREATE_CONTACT","READ_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","DELETE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","contactReducer","state","action","type","contacts","payload","current","map","contact","id","filter","filtered","regex","RegExp","name","match","phone","error"],"mappings":"AAAA,SACEA,cADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,YARF,EASEC,aATF,QAUO,UAVP,C,CAYA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKZ,cAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAAtB,OAAP;AAEF;AAGA;;AACA,SAAKZ,WAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYK,QAAAA,OAAO,EAAEJ,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAKX,aAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYK,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKX,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAEL;AACAG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAAP,CAAeI,EAA9B,GAAmCP,MAAM,CAACG,OAA1C,GAAoDG,OAD5C;AAHL,OAAP;AAQF;;AACA,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CACRF,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OADzB;AAFL,OAAP;AAOF;;AACA,SAAKR,eAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsBF,OAAO,IAAI;AACzC,gBAAMI,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEX,MAAM,CAACG,OAAQ,EAA7B,EAAiC,IAAjC,CAAd;AACA,iBAAOG,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BJ,OAAO,CAACQ,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKd,YAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYU,QAAAA,QAAQ,EAAE;AAAtB,OAAP;AAEF;;AACA,SAAKZ,aAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYgB,QAAAA,KAAK,EAAEf,MAAM,CAACG;AAA1B,OAAP;;AAEF;AACE,aAAOJ,KAAP;AAhDJ;AAkDD,CAnDD;;AAqDA,eAAeD,cAAf","sourcesContent":["import {\n  CREATE_CONTACT,\n  READ_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from \"../types\";\n\n// reducer\nconst contactReducer = (state, action) => {\n  switch (action.type) {\n    // create contact\n    case CREATE_CONTACT:\n      return { ...state, contacts: [...state.contacts, action.payload] };\n    \n    // read contact\n    \n\n    // update contact\n    case SET_CURRENT:\n      return { ...state, current: action.payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        // if the id of current matches existing contact, update value, else old value\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n      };\n\n    // delete contact\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact.id !== action.payload\n        ),\n      };\n\n    // search contacts\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, `gi`);\n          return contact.name.match(regex) || contact.phone.match(regex);\n        }),\n      };\n    case CLEAR_FILTER:\n      return { ...state, filtered: null };\n\n    // get error message\n    case CONTACT_ERROR:\n      return { ...state, error: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default contactReducer;\n"]},"metadata":{},"sourceType":"module"}